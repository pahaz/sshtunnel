params: &params
  parameters:
    version:
      description: Python docker image version
      default: latest
      type: string

job_defaults: &job_defaults
  <<: *params
  executor:
    name: python
    version: << parameters.version >>

version: 2.1

executors:
  python:
    <<: *params
    docker:
      - image: circleci/python:<< parameters.version >>

jobs:
  tests:
    description: Run test suite for a specific python version
    <<: *job_defaults
    steps:
      - checkout
      - restore_cache: &restore_cache
          keys:
            - sshtunnel-py<< parameters.version >>-{{ checksum "sshtunnel.py" }}
      - run: &install
          name: Install sshtunnel and build&test dependencies
          command: |
            pipenv install -e . -r tests/requirements.txt --python $PYTHON_VERSION
          environment:
            - PIPENV_VENV_IN_PROJECT: 1
      - save_cache: &save_cache
          key: sshtunnel-py<< parameters.version >>-{{ checksum "sshtunnel.py" }}
          paths:
            - .venv/
      - run:
          name: Run test suite
          command: |
            args=( '--showlocals' '--durations=10' '-n4' '-W ignore::DeprecationWarning' )
            [[ << parameters.version >> != '2.7' ]] && args+=( '--cov sshtunnel' )
            pipenv run py.test tests ${args[@]}
      - run: coveralls
      - store_test_results:
          path: test_results/

  docs:
    description: Produce documentation from source
    <<: *job_defaults
    steps:
      - checkout
      - restore_cache: *restore_cache
      - run: *install
      - save_cache: *save_cache
      - run:
          name: Installing documentation dependencies
          command: pipenv install --dev -r docs/requirements.txt
      - run:
          name: Build documentation
          command: pipenv run sphinx-build -WavE -b html docs _build/html
      - store_artifacts:
          path: _build/html
          destination: sshtunnel-docs

  syntax:
    description: Run syntax validation tests
    <<: *job_defaults
    steps:
      - checkout
      - restore_cache: *restore_cache
      - run: *install
      - save_cache: *save_cache
      - run:
          name: Installing syntax checks dependencies
          command: pipenv install --dev -r tests/requirements-syntax.txt
      - run:
          name: checking MANIFEST.in
          command: pipenv run check-manifest --ignore tox.ini,tests*,*.yml
      - run:
          name: checking RST syntax
          command: |
            pipenv run python setup.py sdist
            pipenv run twine check dist/*
      - run:
          name: checking PEP8 compliancy
          command: pipenv run flake8 --ignore=W504 .
      - run:
          name: checking CLI help
          command: pipenv run bashtest README.rst

  testdeploy:
    description: Build and upload artifacts to Test PyPI
    <<: *job_defaults
    steps:
      - checkout
      - restore_cache: *restore_cache
      - run:
          name: Build artifact
          command: |
            formats=( 'bdist_egg' )
            [[ << parameters.version >> == 'latest' ]] && formats+=( 'bdist_wheel' )
            pipenv run setup.py ${formats[@]}
      - run:
          name: Check artifacts
          command: pipenv run twine check dist/*
      - store_artifacts:
          path: dist/
      - run:
          name: Upload to TestPyPI
          environment:
            - TWINE_USERNAME: ${{ Environment.TESTPYPI_USERNAME }}
            - TWINE_PASSWORD: ${{ Environment.TESTPYPI_TOKEN }}
          command: pipenv run twine upload --repository testpypi dist/*

  deploy:
    description: Build and upload artifacts to PyPI
    <<: *job_defaults
    steps:
      - checkout
      - restore_cache: *restore_cache
      - run:
          name: Build artifact
          command: |
            formats=( 'bdist_egg' )
            (( << parameters.version >> == 'latest' )) && formats+=( 'bdist_wheel' )
            pipenv run setup.py ${formats[@]}
      - run:
          name: Upload to PyPI
          environment:
            - TWINE_USERNAME: ${{ Environment.PYPI_USERNAME }}
            - TWINE_PASSWORD: ${{ Environment.PYPI_TOKEN }}
          command: pipenv run twine upload dist/*

workflows:
  syntax_and_docs:
    jobs:
      - syntax
      - docs

  test_and_deploy:
    jobs:
      - tests:
          matrix:
            parameters:
              version:
                - "2.7"
                - "3.4"
                - "3.5"
                - "3.6"
                - "3.7"
                - "3.8"
      - testdeploy:
          requires:
            - tests
          matrix:
            parameters:
              version:
                - "2.7"
                - "3.4"
                - "3.5"
                - "3.6"
                - "3.7"
                - "latest"

      - hold:
          type: approval
          requires:
            - testdeploy

      - deploy:
          requires:
            - hold
          matrix:
            parameters:
              version:
                - "2.7"
                - "3.4"
                - "3.5"
                - "3.6"
                - "3.7"
                - "latest"

