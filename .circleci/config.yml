version: 2

jobs:
  test:
    parameters:
      python_version:
        description: Tag for python docker image
        default: latest
        type: string
    docker: &docker
      - image: circleci/python:<< parameters.python_version >>
    steps: &steps
      - checkout
      - restore_cache: &restore_cache
          keys:
            - sshtunnel-py<< python_version >>
      - run:
          name: Install sshtunnel
          command: pipenv install --dev -r tests/requirements.txt -e .
          environment:
            - PIPENV_VENV_IN_PROJECT: 1
      - save_cache:
          key: sshtunnel-py<< python_version >>-{{ checksum "Pipfile.lock" }}
          paths:
            - .venv/
      - run:
          name: Run test suite
          command: |
            args=( '--showlocals', '--durations=10', '-n4', '-W ignore::DeprecationWarning' )
            (( << python_version >> != '2.7' )) && args+=( '--cov sshtunnel' )
            pipenv run py.test tests "${args[@]}"
      - run:
          name: Scan dependency graph for known vulnerabilities
          command: pipenv check
      - run: coveralls
      - store_test_results:
          path: test_results/

  docs:
    docker: *docker
    steps:
      - restore_cache: *restore_cache
      - run:
          name: Installing documentation dependencies
          command: pipenv install --dev -r docs/requirements-docs.txt --skip-lock
      - run:
          name: Build documentation
          command: pipenv run sphinx-build -WavE -b html docs _build/html
      - store-artifacts:
          path: _build/html
          destination: sshtunnel-docs

  syntax:
    docker: *docker
    steps:
      - restore_cache: *restore_cache
      - run:
          name: Installing syntax checks dependencies
          command: pipenv install --dev -r tests/requirements-syntax-tests.txt --skip-lock
      - run:
          name: checking MANIFEST.in
          command: pipenv run check-manifest --ignore tox.ini,tests*,*.yml
      - run:
          name: checking RST syntax
          command: pipenv run python setup.py sdist ; twine check dist/*
      - run:
          name: checking PEP8 compliancy
          command: pipenv run flake8 --ignore=W504 .
      - run:
          name: checking CLI help
          command: pipenv run bashtest README.rst

  deploy:
    docker: *docker
    steps:
      - restore_cache: *restore_cache
      - run:
          name: Install twine
          command: pipenv install --dev twine --skip-lock
      - run: pipenv run python setup.py bdist_egg bdist_wheel
      - save_cache:
          key: 
      - run:
          name: Check artifacts
          command: pipenv run twine check dist/*
      - store_artifacts:
          path: dist/
      - run:
          name: Upload to PyPI
          environment:
            - TWINE_USERNAME: ${{ Environment.PYPI_USERNAME }}
            - TWINE_PASSWORD: ${{ Environment.PYPI_PASSWORD }}
          command: pipenv run twine upload dist/*

workflows:
  version: 2
  syntax_and_docs:
    jobs:
      - syntax
      - docs

  test_and_deploy:
    jobs:
      - test:
          name: test-27
          python_version: 2.7
      - test:
          name: test-34
          python_version: 3.4
      - test:
          name: test-35
          python_version: 3.5
      - test:
          name: test-36
          python_version: 3.6
      - test:
          name: test-37
          python_version: 3.7
      - test:
          name: test-38
          python_version: 3.8
      - deploy:
          requires:
            - syntax
            - test27
            - test34
            - test35
            - test36
            - test37
            - test38
          filters:
            branches:
              only:
                - master
                - main
